This is the instruction of how to setup a java project called "client_project" from https://github.com/toanong/missingdata. This project was used in a paper titled "Improving Record Linkage Performance in the Presence of Missing Linkage Data".

I. Project setup

You will need to install Eclipse which is available to download at http://www.eclipse.org/

1. Download the client_project.zip file at https://github.com/toanong/missingdata

2. Unzip the zip file above to the a location on your computer.

3. In Eclipse, click File\Import, then General\Existing Project into Workspace. Click Next. Select the location of the project you just unzip above. For example: C:/client_project

4. Make sure that all the required libraries are properly located by Eclipse. Go to Project\Properties\Java Build Path\Libraries. Make sure that there's no error in the list in the center. If there is an error with a library, remove that library and click on the Add JARs... button to re-add that library to the project. The Jars required for this project can be found in the lib folder.

II. Configuration file setup

The configuration file is an XML file that contains the values of the parameters needed for data linkage.

Pre-configured configuration files can be found in the cfg folder.

Below is an example of a configuration file

<!-- --------------------------------------- -->
<?xml version="1.0" ?>

<!-- The database management system that is supported by this project. Currently, PostgresSQL is the only database management system that is fully supported by this project. -->

<DBMS>PostgreSQL</DBMS>

<!-- Network location of source A table-->

<DatabaseSourceA>
		<database>postgres</database>
		<table>TableA</table>
		<schema>schema</schema>
		<url>jdbc:postgresql://localhost:5431/</url>
		<user>postgres</user>
		<password>postgres</password>
</DatabaseSourceA>

<!-- Network location of source B table-->

<DatabaseSourceB>
		<database>postgres</database>
		<table>sourceb5k_5_missing</table>
		<schema>tz</schema>
		<url>jdbc:postgresql://localhost:5431/</url>
		<user>postgres</user>
		<password>postgres</password>
</DatabaseSourceB>

<!-- Network location of the table used to store the linkage result. The table name is not needed. The system will use the configuration file name to name the result table -->

<DatabaseSaver>
	<database>postgres</database>
	<schema>tz</schema>
	<url>jdbc:postgresql://localhost:5431/</url>
	<user>postgres</user>
	<password>postgres</password>
</DatabaseSaver>

<!-- 
- Acceptance level is used to idetify if a pair of records is a match or a non-match. Acceptance level must be between 0 and 100.

- Weightidenfifier can be either EM or MANUAL. If Weightidenfifier = EM, the weight of the mapped pairs will be determined using the Expectation Maximization algorithm. If Weightidenfifier = MANUAL, the sum weight of the mapped pairs must be equal to 1.

- For now, Joinmethod must be NESTED_LOOP_JOIN

- Missingdatavalue determines the method used in case missing values occur. Below are the possible values of this parameter.

	0: FRIL-0 method
	100: FRIL-100 method
	DISTANCE_IMPUTATION: Distance imputation method
	ATTRIBUTE_DEDUCTION: Weight redistribution method
	BACKUP_FULL: Full linkage expansion method
	BACKUP_OPTIMAL: Compact linkage expansion method
-->

	<LinkageConfig>
		<acceptancelevel>80</acceptancelevel>
		<weightidenfifier>EM</weightidenfifier>
		<joinmethod>NESTED_LOOP_JOIN</joinmethod>
		<missingdatavalue>DISTANCE_IMPUTATION</missingdatavalue>
	</LinkageConfig>

<!--
	MappedPair determines the fields used as quasi-identifiers, the distance used and the weight. <read_col> is the column from table A above and <write_col> is the the column from table B above.
	Currently, these are supported distances:
		- EDIT_DISTANCE
		- DATE_DISTANCE
		- ADDRESS_DISTANCE
-->
	<DatabaseMap>
		
		<MappedPair attr="SSN" algorithm="EDIT_DISTANCE" weight="0.4">
			<read_col>SSN</read_col>
			<write_col>SSN</write_col>
		</MappedPair>
		<MappedPair attr="LastName" algorithm="EDIT_DISTANCE" weight="0.2">
			<read_col>Last</read_col>
			<write_col>Last</write_col>
		</MappedPair>
		<MappedPair attr="FirstName" algorithm="EDIT_DISTANCE" weight="0.2">
			<read_col>First</read_col>
			<write_col>First</write_col>
		</MappedPair>
		<MappedPair attr="Zip" algorithm="EDIT_DISTANCE" weight="0.2">
			<read_col>zip</read_col>
			<write_col>zip</write_col>
		</MappedPair>
		
	</DatabaseMap>

<!-- 
	BackupMappedPair determines the fields which can be used as backup fields.
-->

<BackupDatabaseMap>
		<BackupMappedPair attr="address" algorithm="ADDRESS_DISTANCE" weight="0.3">
			<read_col>street</read_col>
			<write_col>street</write_col>
		</BackupMappedPair>

		<BackupMappedPair attr="birthday" algorithm="DATE_DISTANCE" weight="0.3" formatRead="yyyy-MM-dd" formatWrite="yyyy-MM-dd">
			<read_col>bdate</read_col>
			<write_col>bdate</write_col>
		</BackupMappedPair>
		<BackupMappedPair attr="email" algorithm="EDIT_DISTANCE" weight="0.3">
			<read_col>email</read_col>
			<write_col>email</write_col>
		</BackupMappedPair>

	</BackupDatabaseMap>
<!-- 
	Linking fields are fields that are used to identify the correctness of the linkage result. Records with the same value of the linking fields are a match. Linking fields should not be used as quasi-identifiers or backup fields.
-->
	<Linking>
		<left_pk>id</left_pk>
		<right_pk>id</right_pk>
	</Linking>
	
</linkage_config>

